---

# Algorithm parameters to solve the transport of intensity equation (TIE)

# The way to solve the Poisson equation
# fft: Fast Fourier transform method per Roddier & Roddier 1993
# exp: Series expansion method per Guruyev & Nugent 1996
poissonSolver: fft

# Maximum number of Zernike polynomials supported
numOfZernikes: 22

# Obscuration ratio used in Zernike polynomials
# 0: Standard filled
# 1: Annular as defined by system in instParam.yaml
# others (0 < x < 1): Use as the obscuration ratio
obsOfZernikes: 1

# Number of outer loop iteration when solving TIE
numOfOuterItr: 14

# Number of inner loop iteration when solving TIE
numOfInnerItr: 6

# Gain value used in the outer loop iteration
feedbackGain: 0.6

# Number of polynomial order supported in off-axis correction
offAxisPolyOrder: 10

# Method to compensate the wavefront by wavefront error
# zer: Derivatives and Jacobians calculated from Zernike polynomials
# opd: Derivitives and Jacobians calculated from wavefront map
compensatorMode: zer

# Compensate the image based on the Zk from the lower terms first according to
# the sequence defined here
# Sets compensated zernike order vs iteration
compSequence: [4, 4, 6, 6, 13, 13, 13, 13, 22, 22, 22, 22, 22, 22]

# Defines how far the computation mask extends beyond the pupil mask and, in
# fft algorithm, it is also the width of Neuman boundary where the derivative
# of the wavefront is set to zero
boundaryThickness: 1

# FFT dimension in pixel
# 999: Automatically chooses next 2^n integer > the smallest image dimension
# other value: Specify 2^n integer > the smallest image dimension
fftDimension: 999

# Signal clipping sequence
# The number of values should be the number of compensation plus 1
# For example, the Poisson solver needs to be run 15 times, when we compensate
# 14 times
signalClipSequence: [0.33, 0.33, 0.33, 0.39, 0.39, 0.45, 0.45, 0.51, 0.51,
                     0.51, 0.51, 0.51, 0.51, 0.51, 0.51]
